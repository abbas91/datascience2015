}
theta <- matrix()
normal.equaltion <- function (x,y) {
theta <- matrix()
y.predict <- matrix()
theta <- (solve(t(x)%*%x))
%*%
(t(x)%*%y)
y.predict = t(theta)%*%x
x.list <- list(theta, y.predict)
return (x.list)
}
?matrix
normal.equaltion <- function (x,y) {
theta <- vector()
y.predict <- vector()
theta <- (solve(t(x)%*%x))
%*%
(t(x)%*%y)
y.predict = t(theta)%*%x
x.list <- list(theta, y.predict)
return (x.list)
}
y <- as.matrix(x + rnorm(1000) + 3)
normal.equaltion <- function (x,y) {
theta <- vector()
y.predict <- vector()
theta <- (solve(t(x)%*%x))
%*%
(t(x)%*%y)
y.predict = t(theta)%*%x
x.list <- list(theta, y.predict)
return (x.list)
}
solve(t(x)%*%x)
t(x)%*%y
solve(t(x)%*%x)
%*%
(t(x)%*%y)
solve(t(x)%*%x)%*%(t(x)%*%y)
t(theta)%*%x
as.matrix(t(theta))%*%x
solve(t(x)%*%x)%*%(t(x)%*%y)
solve(t(x)%*%x)%*%t(x)%*%y
solve(t(x) %*% x) %*% (t(x)%*%y)
solve(t(x) %*% x) %*% (t(x) %*% y)
y <- (x + rnorm(1000) + 3)
View(y)
x <- runif(1000, -5, 5)
x2 <- rep(1,1000)
x <- as.matrix(cbind(x2,x))
y <- (x + rnorm(1000) + 3)
x <- runif(1000, -5, 5)
x2 <- rep(1,1000)
x1 <- as.matrix(cbind(x2,x))
y <- (x + rnorm(1000) + 3)
solve(t(x1) %*% x1) %*% (t(x1) %*% y)
t(theta)%*%1x
theta <- solve(t(x1) %*% x1) %*% (t(x1) %*% y)
y.predict = t(theta) %*% 1x
predict = t(theta) %*% 1x
predict <- t(theta) %*% 1x
predict <- t(theta) %*% x1
theta <- as.matrix(solve(t(x1) %*% x1) %*% (t(x1) %*% y))
predict <- t(theta) %*% x1
View(theta)
t(theta)
View(`x1`)
x1 %*% theta
predict <- x1 %*% theta
v <- lm(y~x1)
v$coefficients
theta
x <- runif(1000, -5, 5)
x2 <- rep(1,1000)
x1 <- as.matrix(cbind(x2,x))
y <- (x + rnorm(1000) + 3)
normal.equaltion <- function (x,y) {
theta <- vector()
y.predict <- vector()
theta <- as.matrix(solve(t(x1) %*% x1) %*% (t(x1) %*% y))
predict <- x1 %*% theta
x.list <- list(theta, predict)
return (x.list)
}
x <- runif(1000, -5, 5)
x2 <- rep(1,1000)
x1 <- as.matrix(cbind(x2,x))
y <- (x + rnorm(1000) + 3)
normal.equaltion(x1,y)
normal.equaltion <- function (x,y) {
theta <- vector()
y.predict <- vector()
theta <- as.matrix(solve(t(x1) %*% x1) %*% (t(x1) %*% y))
predict <- x1 %*% theta
x.list <- list(theta, predict)
}
x <- runif(1000, -5, 5)
x2 <- rep(1,1000)
x1 <- as.matrix(cbind(x2,x))
y <- (x + rnorm(1000) + 3)
a <- normal.equaltion(x1,y)
a$theta
a$x.list
normal.equaltion <- function (x,y) {
theta <- vector()
y.predict <- vector()
theta <- as.matrix(solve(t(x1) %*% x1) %*% (t(x1) %*% y))
predict <- x1 %*% theta
x.list <- list(theta, predict)
return (x.list)
}
a <- normal.equaltion(x1,y)
a$x.list[[1]]
normal.equaltion(x1,y)
a$x.list
a <- normal.equaltion(x1,y)
a
class(a)
a[[1]]
?double
double(10)
double(5)
cost <- function (x,y,theta) {
sum(y %*% log((exp(x %*% theta)) / (1 + exp(x %*% theta)))
+ (1 - y) %*% log(1 - ((exp(x %*% theta)) / (1 + exp(x %*% theta)))))
* -(1/length(y))
}
cost <- function (x,y,theta) {
sum(y %*% log((exp(x %*% theta)) / (1 + exp(x %*% theta)))
+ (1 - y) %*% log(1 - ((exp(x %*% theta)) / (1 + exp(x %*% theta)))))
* (-(1/length(y)))
}
cost <- function (x,y,theta) {
sum(y %*% log((exp(x %*% theta)) / (1 + exp(x %*% theta)))
+ (1 - y) %*% log(1 - ((exp(x %*% theta)) / (1 + exp(x %*% theta)))))
* (-(1/length(y)))
}
cost <- function (x,y,theta) {
sum(y %*% log((exp(x %*% theta)) / (1 + exp(x %*% theta)))
+ (1 - y) %*% log(1 - ((exp(x %*% theta)) / (1 + exp(x %*% theta))))) * (-(1/length(y)))
}
?glm()
a <- 1:10
a
a <- 1L
a
class(a)
a <- c(1L,2L)
class(a)
a <- as.matrix(a)
class(a)
a
a <- as.vector(a)
class(a)
a <- as.numeric(a)
class(a)
a
sttributes(a)
attributes(a)
a <- as.matrix(a)
attributes(a)
?unclass
?readLine
?readLines
?source
y <- data.frame(a = 1, b = "a")
dput(y)
?dput
a <- dput(y)
a
y
?dump
?dput
?dump
y <- data.frame(a = 1, b = "a")
dput(y, file = "y.R")
rm(y)
y
source("y.R")
y
add <- c(1,2,3,4,4)
sdd <- c(3,4,5,6,7)
s <- data.frame(cbind(add,sdd))
s$a
s["a"]
s["a", exact = F]
s$d
s$s
add * sdd
add %*% sdd
warning(paste0("Seat: ", seat_id, " exported completely."))
seat_id <- 1662
warning(paste0("Seat: ", seat_id, " exported completely."))
install.packages('devtools')
library(devtools)
devtools::install_github('rstudio/rsconnect')
sessionInfo()
library(shinyapps)
object.size(z)
a <- c(1,2,3,4,5)
b <- c(2,3,4,5,6)
z <- cbind(a, b)
object.size(z)
install.packages("Matrix")
library(Matrix)
Z <- Matrix(z, sparse = TRUE)
object.size(Z)
a <- c(1,2,3,4,5)
b <- c(0,0,0,0,0)
z <- cbind(a, b)
object.size(z)
Z <- Matrix(z, sparse = TRUE)
object.size(Z)
z <- as.matrix(cbind(a, b))
object.size(z)
Z <- Matrix(z, sparse = TRUE)
object.size(Z)
m1 <- matrix(0, nrow = 1000, ncol = 1000)
m2 <- Matrix(0, nrow = 1000, ncol = 1000, sparse = TRUE)
object.size(m1)
object.size(m2)
View(m1)
memory.size(max = T)
library(shiny)
setwd("C://Users//mark.li//Desktop//Code Books//datascience2015//R code//shiny app folder")
runApp("copilot_R")
# shiny server
library(shiny)
#install.packages("DBI")
library(DBI)
#install.packages("RMySQL")
library(RMySQL)
#install.packages("dplyr")
library(dplyr)
percent <- function(x, digits = 2, format = "f", ...) {
paste0(formatC(100 * x, format = format, digits = digits, ...), "%")
}
pretty.number <- function(x, big.mark=",", scientific=FALSE, ...) {
prettyNum(x, big.mark = big.mark,scientific = scientific)
}
format.money  <- function(x, ...) {
paste0("$", formatC(as.numeric(x), format="f", digits=2, big.mark=","))
}
# shinyServer(function(input, output) {
# Connect MySQL
mydb <- dbConnect(MySQL(),
user='mark2015',
password='fghfgh67743185',
dbname='mysql_copilot_dash_1',
host='mysql-copilot-dash-instance1.cmzj9dljhdnd.us-east-1.rds.amazonaws.com')
# Create Data Set (table) - All
data_sql.all <- dbSendQuery(mydb, "select Seat_ID, insertion_order_name, line_item_name, line_item_id,
lineitem_Type, date(hour) as Date1,
sum(imps) as IMPs,
sum(clicks) as CLICKs, IFNULL(sum(clicks) / sum(imps),0) as CTR,
sum(total_convs) as TOT_CONVs,
sum(cost) as COST,
sum(revenue) as REV,
sum(profit) as PRFT,
IFNULL(sum(cost) / sum(imps),0) * 1000 as CPM,
IFNULL(sum(cost) / sum(clicks),0) as CPC,
IFNULL(sum(cost) / sum(total_convs),0) as CPA
from copilot_dash_log
where IO_Type = 'Copilot_IO'
group by Seat_ID, insertion_order_name, lineitem_Type, date(hour), line_item_name, line_item_id
order by Seat_ID, lineitem_Type, Date1"
)
# shiny server
library(shiny)
#install.packages("DBI")
library(DBI)
#install.packages("RMySQL")
library(RMySQL)
#install.packages("dplyr")
library(dplyr)
percent <- function(x, digits = 2, format = "f", ...) {
paste0(formatC(100 * x, format = format, digits = digits, ...), "%")
}
pretty.number <- function(x, big.mark=",", scientific=FALSE, ...) {
prettyNum(x, big.mark = big.mark,scientific = scientific)
}
format.money  <- function(x, ...) {
paste0("$", formatC(as.numeric(x), format="f", digits=2, big.mark=","))
}
# shinyServer(function(input, output) {
# Connect MySQL
mydb <- dbConnect(MySQL(),
user='mark2015',
password='fghfgh67743185',
dbname='mysql_copilot_dash_1',
host='mysql-copilot-dash-instance1.cmzj9dljhdnd.us-east-1.rds.amazonaws.com')
# Create Data Set (table) - All
data_sql.all <- dbSendQuery(mydb, "select Seat_ID, insertion_order_name, line_item_name, line_item_id,
lineitem_Type, date(hour) as Date1,
sum(imps) as IMPs,
sum(clicks) as CLICKs, IFNULL(sum(clicks) / sum(imps),0) as CTR,
sum(total_convs) as TOT_CONVs,
sum(cost) as COST,
sum(revenue) as REV,
sum(profit) as PRFT,
IFNULL(sum(cost) / sum(imps),0) * 1000 as CPM,
IFNULL(sum(cost) / sum(clicks),0) as CPC,
IFNULL(sum(cost) / sum(total_convs),0) as CPA
from copilot_dash_log
where IO_Type = 'Copilot_IO'
group by Seat_ID, insertion_order_name, lineitem_Type, date(hour), line_item_name, line_item_id
order by Seat_ID, lineitem_Type, Date1"
)
data_sql.all <- fetch(data_sql.all, n=-1)
# Quick format on two IDs
data_sql.all$Seat_ID <- as.character(data_sql.all$Seat_ID)
data_sql.all$line_item_id <- as.character(data_sql.all$line_item_id)
# Create Selection vars / formating in memory
IO_List <- unique(data_sql.all$insertion_order_name)
#Seat_List <- unique(data_sql$Seat_ID)
data_sql <- data_sql.all %>%
filter(Date1 > as.Date(input$dates[1])-1 &
Date1 < as.Date(input$dates[2])+1 &
insertion_order_name == input$IO) %>%
group_by(Seat_ID, insertion_order_name,
lineitem_Type) %>%
summarize(IMPs=sum(IMPs),
CLICKs=sum(CLICKs),
CTR=ifelse(is.nan(sum(CLICKs) / sum(IMPs)),0,sum(CLICKs) / sum(IMPs)),
TOT_CONVs=sum(TOT_CONVs),
COST=sum(COST),
REV=sum(REV),
PRFT=sum(PRFT),
CPM=ifelse(is.na(sum(COST) / sum(IMPs)),0,sum(COST) / sum(IMPs)),
CPC=ifelse(is.nan(sum(COST) / sum(CLICKs)),0,sum(COST) / sum(CLICKs)),
CPA=ifelse(is.na(sum(COST) / sum(TOT_CONVs)),0,sum(COST) / sum(TOT_CONVs))) %>%
transform(IMPs=pretty.number(IMPs),
CLICKs=pretty.number(CLICKs),
CTR=percent(CTR),
TOT_CONVs=pretty.number(TOT_CONVs),
COST=format.money(COST),
REV=format.money(REV),
PRFT=format.money(PRFT),
CPM=format.money(CPM),
CPC=format.money(CPC),
CPA=format.money(CPA))
dates <- c('2015-11-22', '2015-11-24')
IO <- 'Recruitement Campaign_Co-Pilot_September'
data_sql <- data_sql.all %>%
filter(Date1 > as.Date(dates[1])-1 &
Date1 < as.Date(dates[2])+1 &
insertion_order_name == IO) %>%
group_by(Seat_ID, insertion_order_name,
lineitem_Type) %>%
summarize(IMPs=sum(IMPs),
CLICKs=sum(CLICKs),
CTR=ifelse(is.nan(sum(CLICKs) / sum(IMPs)),0,sum(CLICKs) / sum(IMPs)),
TOT_CONVs=sum(TOT_CONVs),
COST=sum(COST),
REV=sum(REV),
PRFT=sum(PRFT),
CPM=ifelse(is.na(sum(COST) / sum(IMPs)),0,sum(COST) / sum(IMPs)),
CPC=ifelse(is.nan(sum(COST) / sum(CLICKs)),0,sum(COST) / sum(CLICKs)),
CPA=ifelse(is.na(sum(COST) / sum(TOT_CONVs)),0,sum(COST) / sum(TOT_CONVs))) %>%
transform(IMPs=pretty.number(IMPs),
CLICKs=pretty.number(CLICKs),
CTR=percent(CTR),
TOT_CONVs=pretty.number(TOT_CONVs),
COST=format.money(COST),
REV=format.money(REV),
PRFT=format.money(PRFT),
CPM=format.money(CPM),
CPC=format.money(CPC),
CPA=format.money(CPA))
View(data_sql)
data_sql <- data_sql.all %>%
filter(Date1 > as.Date(dates[1])-1 &
Date1 < as.Date(dates[2])+1 &
insertion_order_name == IO) %>%
group_by(Seat_ID, insertion_order_name,
lineitem_Type) %>%
summarize(IMPs=sum(IMPs),
CLICKs=sum(CLICKs),
CTR=ifelse(is.nan(sum(CLICKs) / sum(IMPs)),0,sum(CLICKs) / sum(IMPs)),
TOT_CONVs=sum(TOT_CONVs),
COST=sum(COST),
REV=sum(REV),
PRFT=sum(PRFT),
CPM=sum(COST) / sum(IMPs),
CPC=ifelse(is.nan(sum(COST) / sum(CLICKs)),0,sum(COST) / sum(CLICKs)),
CPA=ifelse(is.na(sum(COST) / sum(TOT_CONVs)),0,sum(COST) / sum(TOT_CONVs))) %>%
transform(IMPs=pretty.number(IMPs),
CLICKs=pretty.number(CLICKs),
CTR=percent(CTR),
TOT_CONVs=pretty.number(TOT_CONVs),
COST=format.money(COST),
REV=format.money(REV),
PRFT=format.money(PRFT),
CPM=format.money(CPM),
CPC=format.money(CPC),
CPA=format.money(CPA))
View(data_sql)
View(data_sql)
# shiny server
library(shiny)
#install.packages("DBI")
library(DBI)
#install.packages("RMySQL")
library(RMySQL)
#install.packages("dplyr")
library(dplyr)
percent <- function(x, digits = 2, format = "f", ...) {
paste0(formatC(100 * x, format = format, digits = digits, ...), "%")
}
pretty.number <- function(x, big.mark=",", scientific=FALSE, ...) {
prettyNum(x, big.mark = big.mark,scientific = scientific)
}
format.money  <- function(x, ...) {
paste0("$", formatC(as.numeric(x), format="f", digits=2, big.mark=","))
}
# shinyServer(function(input, output) {
# Connect MySQL
mydb <- dbConnect(MySQL(),
user='mark2015',
password='fghfgh67743185',
dbname='mysql_copilot_dash_1',
host='mysql-copilot-dash-instance1.cmzj9dljhdnd.us-east-1.rds.amazonaws.com')
# Create Data Set (table) - All
data_sql.all <- dbSendQuery(mydb, "select Seat_ID, insertion_order_name, line_item_name, line_item_id,
lineitem_Type, date(hour) as Date1,
sum(imps) as IMPs,
sum(clicks) as CLICKs, IFNULL(sum(clicks) / sum(imps),0) as CTR,
sum(total_convs) as TOT_CONVs,
sum(cost) as COST,
sum(revenue) as REV,
sum(profit) as PRFT,
IFNULL(sum(cost) / sum(imps),0) * 1000 as CPM,
IFNULL(sum(cost) / sum(clicks),0) as CPC,
IFNULL(sum(cost) / sum(total_convs),0) as CPA
from copilot_dash_log
where IO_Type = 'Copilot_IO'
group by Seat_ID, insertion_order_name, lineitem_Type, date(hour), line_item_name, line_item_id
order by Seat_ID, lineitem_Type, Date1"
)
data_sql.all <- fetch(data_sql.all, n=-1)
# Quick format on two IDs
data_sql.all$Seat_ID <- as.character(data_sql.all$Seat_ID)
data_sql.all$line_item_id <- as.character(data_sql.all$line_item_id)
# Create Selection vars / formating in memory
IO_List <- unique(data_sql.all$insertion_order_name)
#Seat_List <- unique(data_sql$Seat_ID)
dates <- c('2015-11-22', '2015-11-24')
IO <- 'Recruitement Campaign_Co-Pilot_September'
data_sql <- data_sql.all %>%
filter(Date1 > as.Date(dates[1])-1 &
Date1 < as.Date(dates[2])+1 &
insertion_order_name == IO) %>%
group_by(Seat_ID, insertion_order_name,
lineitem_Type) %>%
summarize(IMPs=sum(IMPs),
CLICKs=sum(CLICKs),
CTR=ifelse(is.nan(sum(CLICKs) / sum(IMPs)),0,sum(CLICKs) / sum(IMPs)),
TOT_CONVs=sum(TOT_CONVs),
COST=sum(COST),
REV=sum(REV),
PRFT=sum(PRFT),
CPM=sum(COST) / sum(IMPs),
CPC=ifelse(is.nan(sum(COST) / sum(CLICKs)),0,sum(COST) / sum(CLICKs)),
CPA=ifelse(is.na(sum(COST) / sum(TOT_CONVs)),0,sum(COST) / sum(TOT_CONVs))) %>%
transform(IMPs=pretty.number(IMPs),
CLICKs=pretty.number(CLICKs),
CTR=percent(CTR),
TOT_CONVs=pretty.number(TOT_CONVs),
COST=format.money(COST),
REV=format.money(REV),
PRFT=format.money(PRFT),
CPM=format.money(CPM),
CPC=format.money(CPC),
CPA=format.money(CPA))
View(data_sql)
View(data_sql.all)
sum(COST) / sum(IMPs)
data_sql <- data_sql.all %>%
filter(Date1 > as.Date(dates[1])-1 &
Date1 < as.Date(dates[2])+1 &
insertion_order_name == IO) %>%
group_by(Seat_ID, insertion_order_name,
lineitem_Type) %>%
summarize(IMPs=sum(IMPs),
CLICKs=sum(CLICKs),
CTR=ifelse(is.nan(sum(CLICKs) / sum(IMPs)),0,sum(CLICKs) / sum(IMPs)),
TOT_CONVs=sum(TOT_CONVs),
COST=sum(COST),
REV=sum(REV),
PRFT=sum(PRFT),
CPM=sum(COST) / sum(IMPs),
CPC=ifelse(is.nan(sum(COST) / sum(CLICKs)),0,sum(COST) / sum(CLICKs)),
CPA=ifelse(is.na(sum(COST) / sum(TOT_CONVs)),0,sum(COST) / sum(TOT_CONVs)))
View(data_sql)
data_sql <- data_sql.all %>%
filter(Date1 > as.Date(dates[1])-1 &
Date1 < as.Date(dates[2])+1 &
insertion_order_name == IO) %>%
group_by(Seat_ID, insertion_order_name,
lineitem_Type) %>%
summarize(IMPs=sum(IMPs),
CLICKs=sum(CLICKs),
CTR=ifelse(is.nan(sum(CLICKs) / sum(IMPs)),0,sum(CLICKs) / sum(IMPs)),
TOT_CONVs=sum(TOT_CONVs),
COST=sum(COST),
REV=sum(REV),
PRFT=sum(PRFT),
CPM=ifelse(is.na(sum(COST) / sum(IMPs)*1000),0,sum(COST) / sum(IMPs)*1000),
CPC=ifelse(is.nan(sum(COST) / sum(CLICKs)),0,sum(COST) / sum(CLICKs)),
CPA=ifelse(is.na(sum(COST) / sum(TOT_CONVs)),0,sum(COST) / sum(TOT_CONVs)))
View(data_sql)
