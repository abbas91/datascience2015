d[1]
r2 = d[,1]
class(r2)
?grep()
?assign()
x = c(1,2,3)
if(x>1)
if(x>1) x+1
if(x>1) x = x+1
if(x>1) x
?if
}
if(x>1) break
?get()
a = c(1,2,3)
b = c(4,5,6)
z = get(a,b)
for (x in c("a","b")) {
z = get(x)
print(x)
}
for (x in c("a","b")) {
z = get(x)
print(z)
}
8%%4
8%%3
8%/%3
?assign()
plot(quakes)
?new.env()
?edit()
a = c(1,2,3)
b = c(4,5,6)
edit(a)
a
a = edit(a)
a
?prod()
prod(a)
11*22*33
?solve()
?sweep()
?cat()
a
a = scan("")
10:10 11 12
13:
a = scan("")
10: 10 11 12
13:
a = scan("")
a = scan("")
a
a = scan("")
a = scan("")
class(a)
?seek()
?g()
?browse()
?browser()
plot(quakes)
names(quakes)
dev.off()
plot(quakes)
View(view1)
View(view1)
View(view1)
plot(quakes)
// Outer Cross Validation Loop
for (i in 1:k) {
Train = X[folds != i,]
Test = X[folds == i,]
// Inner Cross Validation Loop
for (j in 1:k) {
InnerTrain = Train[folds != j,]
InnerTest = Train[folds == j,]
// Train Model
// Try multiple parameter settings
// Predict on InnerTest
}
// Choose best parameters
// Train model using best parameters from inner loop
// Test performance on Test
}
y = matrix(c(1,2,3,4), nrow = 2)
y %*% y
y * c(1,2)
plot(quakes)
colmean(quakes)
apply(quakes,1,mean)
b = list(5,3)
a = list(b,7)
a
3+8+6+4
two = function (u) {
u <<- 2*u
z <- 2*z
}
x = 1
z = 3
u
two(x)
u
z
two = function (u) {
u <<- 2*u
z <- 2*z
}
two = function (u) {
u <<- 2*u
z <<- 2*z
}
two(x)
z
z
?assign()
a = c(3,5,2,8,4,6,1,7,4,9)
sort(a)
order(a)
?order()
a
?order()
order(a)
Rprof()
invisible(powers1(a,4))
Rprof(NULL)
summaryRprof()
a = c(3,5,2,8,4,6,1,7,4,9)
Rprof()
invisible(powers1(a,4))
Rprof(NULL)
summaryRprof()
Rprof()
invisible(powers1(a,4))
?dyn.load()
?reshape()
?reshape2()
?reshape2()
install.packages("reshape2")
library(reshape2)
?reshape2()
library(reshape2)
?reshape2()
?melt()
?reshape()
tony = scan(file="C:/Users/mark.li/Desktop/tony.csv", sep="\t", what="character")
tony = as.list(tony)
tony[[1]]
tony[[1]][1]
tony[[2]]
dfx <- data.frame(
group = c(rep('A', 8), rep('B', 15), rep('C', 6)),
sex = sample(c("M", "F"), size = 29, replace = TRUE),
age = runif(n = 29, min = 18, max = 54))
dfx
?gsub()
install.packages("Rcpp")
library(Rcpp)
library(Rcpp)
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
qplot(carat, price, data = diamonds)
qplot(log(carat), log(price), data = diamonds)
qplot(carat, x*y*z, data = diamonds)
names(data)
names(diamonds)
qplot(carat, price, data = diamonds, colour = color)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, colour = color, geom = c("point", 'smooth'))
qplot(carat, price, data = diamonds, geom = c("point", 'smooth'))
data = diamonds[sample(nrow(diamonds), 100),]
qplot(carat, price, data = data, geom = c("point", 'smooth'))
qplot(carat, price, data = data, geom = c("point", 'smooth'), span = 0.2)
install.packages("mgcv")
install.packages("mgcv")
library(mgcv)
install.packages("nlme")
install.packages("nlme")
install.packages("mgcv")
library(mgcv)
library(mgcv)
qplot(carat, price, data = data, geom = c("point", 'smooth'), span = 0.2, method = 'gam', formula = y ~ s(x))
install.packages("Rcpp")
library(Rcpp)
install.packages("ggplot2")
library(ggplot2)
qplot(carat, price, data = data, geom = c("point", 'smooth'), span = 0.2, method = 'gam', formula = y ~ s(x))
qplot(carat, price, data = data, colour = color, geom = c("point", 'smooth'), span = 0.2, method = 'gam', formula = y ~ s(x))
qplot(carat, price, data = data, geom = c("point", 'smooth'), span = 0.2, method = 'gam', formula = y ~ s(x), colour = color)
qplot(carat, price, data = data, geom = c("point", 'smooth'), span = 0.2, method = 'gam', formula = y ~ s(x))
qplot(carat, data = diamonds, geom = 'density', colour = color)
qplot(carat, data = diamonds, geom = 'density', fill = color)
View(d)
install.packages("Rcpp")
library(Rcpp)
install.packages("ggplot2")
library(ggplot2)
install.packages("mgcv")
library(mgcv)
install.packages("nlme")
diamonds
set.seed(10)
data = diamonds[sample(nrow(diamonds), 100),]
names(diamonds)
qplot(carat, price, data = diamonds)
qplot(log(carat), log(price), data = diamonds)
install.packages("nlme")
qplot(carat, price, data = diamonds)
?sample
?runif()
m = runif(100,1,2)
num = sample(1:5, m, replace=T)
num
m
data
a = c(1,2,3,4,5,6,7)
?dplyr
?force
install.packages("XML")
library(XML)
theurl <- "file:///C:/Users/mark.li/Desktop/Turbine%20History.html"
tables <- readHTMLTable(theurl)
table.data <- unlist(tables)
tables[[1]]
?rep
rep(2,10,1)
rep(2,10)
rep(2,10, each = 1)
rep(c(2,3,4),10, each = 2)
TP1 <- c(rep(c(3,6,8),100,2))
TP1
TP1 <- rep(c(3,6,8),100,2)
TP1 <- rep(c(3,6,8),100,each = 2)
Tp2 <- rep(c(5,9,1),100,each = 2)
Tp3 <- rep(c(5,2,4),100,each = 2)
Tp4 <- rep(c(3,1,8),100,each = 2)
TP1 <- rep(c(0,6,8),100,each = 2)
Tp2 <- rep(c(5,0,1),100,each = 2)
Tp3 <- rep(c(0,2,4),100,each = 2)
Tp4 <- rep(c(3,0,8),100,each = 2)
Tp1 <- rep(c(0,6,8),100,each = 2)
rm(TP1)
Tp1-Tp2 <- ifelse(Tp1=0,0,1) * ifelse(Tp2=0,0,1)
?ifelse
ifelse(Tp2 = 0,0,1)
ifelse(Tp2 == 0,0,1)
Tp1-Tp2 <- ifelse(Tp1 == 0,0,1) * ifelse(Tp2 == 0,0,1)
Tp1.Tp2 <- ifelse(Tp1 == 0,0,1) * ifelse(Tp2 == 0,0,1)
Tp1.Tp2 <- ifelse(Tp1 == 0,0,1) * ifelse(Tp2 == 0,0,1)
Tp3.Tp2 <- ifelse(Tp3 == 0,0,1) * ifelse(Tp2 == 0,0,1)
Tp4.Tp2 <- ifelse(Tp4 == 0,0,1) * ifelse(Tp2 == 0,0,1)
Tp3.Tp4 <- ifelse(Tp3 == 0,0,1) * ifelse(Tp4 == 0,0,1)
Tp1.Tp4 <- ifelse(Tp1 == 0,0,1) * ifelse(Tp4 == 0,0,1)
x <- runif(1000, -5, 5)
y <- x + rnorm(1000) + 3
x2 <-req(1,1000)
x2 <-seq(1,1000)
x <- as.matrix(cbind(x2,x))
View(x)
x2 <-seq(1,1000,each = 0)
x2 <-seq(1,each = 1000)
?seq
x2 <-rep(1,1000)
x <- as.matrix(cbind(x2,x))
View(x)
rm(x)
x <- as.matrix(cbind(x2,x))
x <- runif(1000, -5, 5)
x <- as.matrix(cbind(x2,x))
View(x)
normal.equaltion <- function (x,y) {
theta <- (solve(t(x)%*%x))
%*%
(t(x)%*%y)
y.predict = t(theta)%*%x
x.list <- list(theta, y.predict)
return (x.list)
}
theta <- matrix()
normal.equaltion <- function (x,y) {
theta <- matrix()
y.predict <- matrix()
theta <- (solve(t(x)%*%x))
%*%
(t(x)%*%y)
y.predict = t(theta)%*%x
x.list <- list(theta, y.predict)
return (x.list)
}
?matrix
normal.equaltion <- function (x,y) {
theta <- vector()
y.predict <- vector()
theta <- (solve(t(x)%*%x))
%*%
(t(x)%*%y)
y.predict = t(theta)%*%x
x.list <- list(theta, y.predict)
return (x.list)
}
y <- as.matrix(x + rnorm(1000) + 3)
normal.equaltion <- function (x,y) {
theta <- vector()
y.predict <- vector()
theta <- (solve(t(x)%*%x))
%*%
(t(x)%*%y)
y.predict = t(theta)%*%x
x.list <- list(theta, y.predict)
return (x.list)
}
solve(t(x)%*%x)
t(x)%*%y
solve(t(x)%*%x)
%*%
(t(x)%*%y)
solve(t(x)%*%x)%*%(t(x)%*%y)
t(theta)%*%x
as.matrix(t(theta))%*%x
solve(t(x)%*%x)%*%(t(x)%*%y)
solve(t(x)%*%x)%*%t(x)%*%y
solve(t(x) %*% x) %*% (t(x)%*%y)
solve(t(x) %*% x) %*% (t(x) %*% y)
y <- (x + rnorm(1000) + 3)
View(y)
x <- runif(1000, -5, 5)
x2 <- rep(1,1000)
x <- as.matrix(cbind(x2,x))
y <- (x + rnorm(1000) + 3)
x <- runif(1000, -5, 5)
x2 <- rep(1,1000)
x1 <- as.matrix(cbind(x2,x))
y <- (x + rnorm(1000) + 3)
solve(t(x1) %*% x1) %*% (t(x1) %*% y)
t(theta)%*%1x
theta <- solve(t(x1) %*% x1) %*% (t(x1) %*% y)
y.predict = t(theta) %*% 1x
predict = t(theta) %*% 1x
predict <- t(theta) %*% 1x
predict <- t(theta) %*% x1
theta <- as.matrix(solve(t(x1) %*% x1) %*% (t(x1) %*% y))
predict <- t(theta) %*% x1
View(theta)
t(theta)
View(`x1`)
x1 %*% theta
predict <- x1 %*% theta
v <- lm(y~x1)
v$coefficients
theta
x <- runif(1000, -5, 5)
x2 <- rep(1,1000)
x1 <- as.matrix(cbind(x2,x))
y <- (x + rnorm(1000) + 3)
normal.equaltion <- function (x,y) {
theta <- vector()
y.predict <- vector()
theta <- as.matrix(solve(t(x1) %*% x1) %*% (t(x1) %*% y))
predict <- x1 %*% theta
x.list <- list(theta, predict)
return (x.list)
}
x <- runif(1000, -5, 5)
x2 <- rep(1,1000)
x1 <- as.matrix(cbind(x2,x))
y <- (x + rnorm(1000) + 3)
normal.equaltion(x1,y)
normal.equaltion <- function (x,y) {
theta <- vector()
y.predict <- vector()
theta <- as.matrix(solve(t(x1) %*% x1) %*% (t(x1) %*% y))
predict <- x1 %*% theta
x.list <- list(theta, predict)
}
x <- runif(1000, -5, 5)
x2 <- rep(1,1000)
x1 <- as.matrix(cbind(x2,x))
y <- (x + rnorm(1000) + 3)
a <- normal.equaltion(x1,y)
a$theta
a$x.list
normal.equaltion <- function (x,y) {
theta <- vector()
y.predict <- vector()
theta <- as.matrix(solve(t(x1) %*% x1) %*% (t(x1) %*% y))
predict <- x1 %*% theta
x.list <- list(theta, predict)
return (x.list)
}
a <- normal.equaltion(x1,y)
a$x.list[[1]]
normal.equaltion(x1,y)
a$x.list
a <- normal.equaltion(x1,y)
a
class(a)
a[[1]]
?double
double(10)
double(5)
cost <- function (x,y,theta) {
sum(y %*% log((exp(x %*% theta)) / (1 + exp(x %*% theta)))
+ (1 - y) %*% log(1 - ((exp(x %*% theta)) / (1 + exp(x %*% theta)))))
* -(1/length(y))
}
cost <- function (x,y,theta) {
sum(y %*% log((exp(x %*% theta)) / (1 + exp(x %*% theta)))
+ (1 - y) %*% log(1 - ((exp(x %*% theta)) / (1 + exp(x %*% theta)))))
* (-(1/length(y)))
}
cost <- function (x,y,theta) {
sum(y %*% log((exp(x %*% theta)) / (1 + exp(x %*% theta)))
+ (1 - y) %*% log(1 - ((exp(x %*% theta)) / (1 + exp(x %*% theta)))))
* (-(1/length(y)))
}
cost <- function (x,y,theta) {
sum(y %*% log((exp(x %*% theta)) / (1 + exp(x %*% theta)))
+ (1 - y) %*% log(1 - ((exp(x %*% theta)) / (1 + exp(x %*% theta))))) * (-(1/length(y)))
}
?glm()
a <- 1:10
a
a <- 1L
a
class(a)
a <- c(1L,2L)
class(a)
a <- as.matrix(a)
class(a)
a
a <- as.vector(a)
class(a)
a <- as.numeric(a)
class(a)
a
sttributes(a)
attributes(a)
a <- as.matrix(a)
attributes(a)
?unclass
?readLine
?readLines
?source
y <- data.frame(a = 1, b = "a")
dput(y)
?dput
a <- dput(y)
a
y
?dump
?dput
?dump
y <- data.frame(a = 1, b = "a")
dput(y, file = "y.R")
rm(y)
y
source("y.R")
y
add <- c(1,2,3,4,4)
sdd <- c(3,4,5,6,7)
s <- data.frame(cbind(add,sdd))
s$a
s["a"]
s["a", exact = F]
s$d
s$s
add * sdd
add %*% sdd
warning(paste0("Seat: ", seat_id, " exported completely."))
seat_id <- 1662
warning(paste0("Seat: ", seat_id, " exported completely."))
install.packages('devtools')
library(devtools)
devtools::install_github('rstudio/rsconnect')
sessionInfo()
library(shinyapps)
object.size(z)
a <- c(1,2,3,4,5)
b <- c(2,3,4,5,6)
z <- cbind(a, b)
object.size(z)
install.packages("Matrix")
library(Matrix)
Z <- Matrix(z, sparse = TRUE)
object.size(Z)
a <- c(1,2,3,4,5)
b <- c(0,0,0,0,0)
z <- cbind(a, b)
object.size(z)
Z <- Matrix(z, sparse = TRUE)
object.size(Z)
z <- as.matrix(cbind(a, b))
object.size(z)
Z <- Matrix(z, sparse = TRUE)
object.size(Z)
m1 <- matrix(0, nrow = 1000, ncol = 1000)
m2 <- Matrix(0, nrow = 1000, ncol = 1000, sparse = TRUE)
object.size(m1)
object.size(m2)
View(m1)
runApp("copilot_R")
library(shiny)
setwd("C://Users//mark.li//Desktop//Code Books//datascience2015//R code//shiny app folder")
runApp("copilot_R")
?format
runApp("copilot_R")
library(dplyr)
runApp("copilot_R")
setwd("C://Users//mark.li//Desktop//Code Books//datascience2015//R code//shiny app folder")
runApp("copilot_R")
