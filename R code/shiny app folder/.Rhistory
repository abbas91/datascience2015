a$x.list
normal.equaltion <- function (x,y) {
theta <- vector()
y.predict <- vector()
theta <- as.matrix(solve(t(x1) %*% x1) %*% (t(x1) %*% y))
predict <- x1 %*% theta
x.list <- list(theta, predict)
return (x.list)
}
a <- normal.equaltion(x1,y)
a$x.list[[1]]
normal.equaltion(x1,y)
a$x.list
a <- normal.equaltion(x1,y)
a
class(a)
a[[1]]
?double
double(10)
double(5)
cost <- function (x,y,theta) {
sum(y %*% log((exp(x %*% theta)) / (1 + exp(x %*% theta)))
+ (1 - y) %*% log(1 - ((exp(x %*% theta)) / (1 + exp(x %*% theta)))))
* -(1/length(y))
}
cost <- function (x,y,theta) {
sum(y %*% log((exp(x %*% theta)) / (1 + exp(x %*% theta)))
+ (1 - y) %*% log(1 - ((exp(x %*% theta)) / (1 + exp(x %*% theta)))))
* (-(1/length(y)))
}
cost <- function (x,y,theta) {
sum(y %*% log((exp(x %*% theta)) / (1 + exp(x %*% theta)))
+ (1 - y) %*% log(1 - ((exp(x %*% theta)) / (1 + exp(x %*% theta)))))
* (-(1/length(y)))
}
cost <- function (x,y,theta) {
sum(y %*% log((exp(x %*% theta)) / (1 + exp(x %*% theta)))
+ (1 - y) %*% log(1 - ((exp(x %*% theta)) / (1 + exp(x %*% theta))))) * (-(1/length(y)))
}
?glm()
a <- 1:10
a
a <- 1L
a
class(a)
a <- c(1L,2L)
class(a)
a <- as.matrix(a)
class(a)
a
a <- as.vector(a)
class(a)
a <- as.numeric(a)
class(a)
a
sttributes(a)
attributes(a)
a <- as.matrix(a)
attributes(a)
?unclass
?readLine
?readLines
?source
y <- data.frame(a = 1, b = "a")
dput(y)
?dput
a <- dput(y)
a
y
?dump
?dput
?dump
y <- data.frame(a = 1, b = "a")
dput(y, file = "y.R")
rm(y)
y
source("y.R")
y
add <- c(1,2,3,4,4)
sdd <- c(3,4,5,6,7)
s <- data.frame(cbind(add,sdd))
s$a
s["a"]
s["a", exact = F]
s$d
s$s
add * sdd
add %*% sdd
warning(paste0("Seat: ", seat_id, " exported completely."))
seat_id <- 1662
warning(paste0("Seat: ", seat_id, " exported completely."))
install.packages('devtools')
library(devtools)
devtools::install_github('rstudio/rsconnect')
sessionInfo()
library(shinyapps)
object.size(z)
a <- c(1,2,3,4,5)
b <- c(2,3,4,5,6)
z <- cbind(a, b)
object.size(z)
install.packages("Matrix")
library(Matrix)
Z <- Matrix(z, sparse = TRUE)
object.size(Z)
a <- c(1,2,3,4,5)
b <- c(0,0,0,0,0)
z <- cbind(a, b)
object.size(z)
Z <- Matrix(z, sparse = TRUE)
object.size(Z)
z <- as.matrix(cbind(a, b))
object.size(z)
Z <- Matrix(z, sparse = TRUE)
object.size(Z)
m1 <- matrix(0, nrow = 1000, ncol = 1000)
m2 <- Matrix(0, nrow = 1000, ncol = 1000, sparse = TRUE)
object.size(m1)
object.size(m2)
View(m1)
memory.size(max = T)
# Create the loss function
loss <- function(intercept, slope, x, y) sum(((intercept + (slope * x)) - y)^2)/2
# Gradient descent function
grad <- function(x, y, theta) {
gradient <- (t(x) %*% ((x %*% t(theta)) - y))
return(t(gradient))
}
# Show the path of a gradient descent parameter optimization
gradient.path <- function(x) {
# Initialize the parameters
theta <- matrix(c(0, 0), nrow=1)
# Look at the values over each iteration
theta.path <- matrix(ncol=2)
for (i in 1:500) {
theta <- theta - alpha * 1/m * grad(x, y, theta)
if(all(is.na(theta))) break
theta.path <- rbind(theta.path, theta)
}
theta.path
}
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
library(parallel)
detectCores(all.tests = FALSE, logical = T)
detectCores(all.tests = FALSE, logical = F)
detectCores(all.tests = T, logical = F)
detectCores(all.tests = F, logical = F)
?doMC
install.packages("doMC")
library(doMC)
library(doMC)
library(doMC)
install.packages("doMC")
install.packages("doParallel")
library(doParallel)
library(plyr)
library(parallel)
library(doParallel)
?doParallel
install.packages("doSNOW")
library(doSNOW)
install.packages("doSMP")
library(doSMP)
install.packages("C:/Users/mark.li/Desktop/Code Books/doSMP_1.0-1.tar.gz", repos = NULL, type = "source")
install.packages("revoIPC")
install.packages("revoIPC")
install.packages("C:/Users/mark.li/Desktop/Code Books/revoIPC_1.0-3.tar.gz", repos = NULL, type = "source")
library(Matrix)
install.packages("C:/Users/mark.li/Desktop/Code Books/revoIPC_1.0-3.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/mark.li/Desktop/Code Books/doSMP_1.0-1.tar.gz", repos = NULL, type = "source")
library(revoIPC)
install.packages("C:/Users/mark.li/Desktop/Code Books/doSMP_1.0-1.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/mark.li/Desktop/Code Books/revoIPC_1.0-3.tar.gz", repos = NULL, type = "source")
install.packages("foreach")
library(foreach)
library(parallel)
?parApply
library(parallel)
cat("CPU")
?gl
install.packages("rbenchmark")
library(rbenchmark)
?seq
benchmark(
runif(0,1,100)
seq(1,100,1)
)
benchmark(
runif(0,1,100),
seq(1,100,1)
)
benchmark(
runif(0,1,10000),
seq(1,10000,1)
)
benchmark(
runif(0,1,1000000),
seq(1,1000000,1)
)
sys.time(runif(0,1,1000000))
?sys.time
Sys.time(runif(0,1,1000000))
system.time(runif(0,1,1000000))
system.time(seq(1,1000000,1))
?foreach
?foreach
?foreach
?foreach
?parApply
library(foreach)
?foreach
?select
?select
library(dplyr)
?select
library(plyr)
library(plyr)
library(dplyr)
?ddply
quit()
library(shiny)
setwd("C://My desktop files//Code Books//datascience2015//R code//shiny app folder")
runApp("copilot_R")
runApp("copilot_R")
aa <- function() {
dd <- c(1,2,3,4,5,6,7,78,8)
return (dd)
}
aa
aa()
aa <- function() {
dd <- data.frame(c(1,2,3,4,5,6,7,78,8))
return (dd)
}
aa()
runApp("copilot_R")
benchmark <- function() {
# Building benchmark table
# Gloabl -
global <- data_sql.all %>%
summarize(CTR=ifelse(is.nan(sum(CLICKs) / sum(IMPs)),0,sum(CLICKs) / sum(IMPs)),
MARGIN=sum(PRFT) / sum(REV), # new
CPM=ifelse(is.na(sum(COST) / sum(IMPs)*1000),0,sum(COST) / sum(IMPs)*1000),
CPC=ifelse(is.nan(sum(COST) / sum(CLICKs)),0,sum(COST) / sum(CLICKs)),
CPA=ifelse(is.na(sum(COST) / sum(TOT_CONVs)),0,sum(COST) / sum(TOT_CONVs))) %>%
transform(CTR=percent(CTR),
MARGIN=percent(MARGIN), # new
CPM=format.money(CPM),
CPC=format.money(CPC),
CPA=format.money(CPA))
# Seat -
Seat <- data_sql.all %>%
filter(Date1 > as.Date(input$dates[1])-1 &
Date1 < as.Date(input$dates[2])+1 &
insertion_order_name == input$IO) %>%
group_by(Seat_ID) %>%
summarize(CTR=ifelse(is.nan(sum(CLICKs) / sum(IMPs)),0,sum(CLICKs) / sum(IMPs)),
MARGIN=sum(PRFT) / sum(REV), # new
CPM=ifelse(is.na(sum(COST) / sum(IMPs)*1000),0,sum(COST) / sum(IMPs)*1000),
CPC=ifelse(is.nan(sum(COST) / sum(CLICKs)),0,sum(COST) / sum(CLICKs)),
CPA=ifelse(is.na(sum(COST) / sum(TOT_CONVs)),0,sum(COST) / sum(TOT_CONVs))) %>%
summarize(CTR=mean(CTR[is.finite(CTR)]),
MARGIN=mean(MARGIN[is.finite(MARGIN)]), # new
CPM=mean(CPM[is.finite(CPM)]),
CPC=mean(CPC[is.finite(CPC)]),
CPA=mean(CPA[is.finite(CPA)])) %>%
transform(CTR=percent(CTR),
MARGIN=percent(MARGIN), # new
CPM=format.money(CPM),
CPC=format.money(CPC),
CPA=format.money(CPA))
# Lineitem
Lineitem <- data_sql.all %>%
filter(Date1 > as.Date(input$dates[1])-1 &
Date1 < as.Date(input$dates[2])+1 &
insertion_order_name == input$IO) %>%
group_by(line_item_id) %>%
summarize(CTR=ifelse(is.nan(sum(CLICKs) / sum(IMPs)),0,sum(CLICKs) / sum(IMPs)),
MARGIN=sum(PRFT) / sum(REV), # new
CPM=ifelse(is.na(sum(COST) / sum(IMPs)*1000),0,sum(COST) / sum(IMPs)*1000),
CPC=ifelse(is.nan(sum(COST) / sum(CLICKs)),0,sum(COST) / sum(CLICKs)),
CPA=ifelse(is.na(sum(COST) / sum(TOT_CONVs)),0,sum(COST) / sum(TOT_CONVs))) %>%
summarize(CTR=mean(CTR[is.finite(CTR)]),
MARGIN=mean(MARGIN[is.finite(MARGIN)]), # new
CPM=mean(CPM[is.finite(CPM)]),
CPC=mean(CPC[is.finite(CPC)]),
CPA=mean(CPA[is.finite(CPA)])) %>%
transform(CTR=percent(CTR),
MARGIN=percent(MARGIN), # new
CPM=format.money(CPM),
CPC=format.money(CPC),
CPA=format.money(CPA))
# combine
Benchmark_Scale <- c("Global_AVG", "Seat_AVG", "Lineitem_AVG")
benchmark <- data.frame(rbind(global, Seat, Lineitem))
benchmark <- data.frame(cbind(Benchmark_Scale, benchmark))
rm(Benchmark_Scale, global, Seat, Lineitem)
return (Benchmark)
}
runApp("copilot_R")
# shiny server
library(shiny)
#install.packages("DBI")
library(DBI)
#install.packages("RMySQL")
library(RMySQL)
#install.packages("dplyr")
library(dplyr)
install.packages("muStat")
library(muStat)
percent <- function(x, digits = 2, format = "f", ...) {
paste0(formatC(100 * x, format = format, digits = digits, ...), "%")
}
pretty.number <- function(x, big.mark=",", scientific=FALSE, ...) {
prettyNum(x, big.mark = big.mark,scientific = scientific)
}
format.money  <- function(x, ...) {
paste0("$", formatC(as.numeric(x), format="f", digits=2, big.mark=","))
}
# Connect MySQL
mydb <- dbConnect(MySQL(),
user='mark2015',
password='fghfgh67743185',
dbname='mysql_copilot_dash_1',
host='mysql-copilot-dash-instance1.cmzj9dljhdnd.us-east-1.rds.amazonaws.com')
# Create Data Set (table) - All
data_sql.all <- dbSendQuery(mydb, "select Seat_ID, insertion_order_name, line_item_name, line_item_id,
lineitem_Type, date(hour) as Date1,
sum(imps) as IMPs,
sum(clicks) as CLICKs, IFNULL(sum(clicks) / sum(imps),0) as CTR,
sum(total_convs) as TOT_CONVs,
sum(cost) as COST,
sum(revenue) as REV,
sum(profit) as PRFT,
IFNULL(sum(cost) / sum(imps),0) * 1000 as CPM,
IFNULL(sum(cost) / sum(clicks),0) as CPC,
IFNULL(sum(cost) / sum(total_convs),0) as CPA
from copilot_dash_log
where IO_Type = 'Copilot_IO'
group by Seat_ID, insertion_order_name, lineitem_Type, date(hour), line_item_name, line_item_id
order by Seat_ID, lineitem_Type, Date1"
)
data_sql.all <- fetch(data_sql.all, n=-1)
# Quick format on two IDs
data_sql.all$Seat_ID <- as.character(data_sql.all$Seat_ID)
data_sql.all$line_item_id <- as.character(data_sql.all$line_item_id)
# Create Selection vars / formating in memory
IO_List <- unique(data_sql.all$insertion_order_name)
#Seat_List <- unique(data_sql$Seat_ID)
dates <- c('2015-12-01', '2015-12-08')
IO_List
Seat_select <- data_sql.all$Seat_ID[insertion_order_name == "XEROX GCOMS X040 MAR/JAN-2016 ALL UK"]
Seat_select <- data_sql.all$Seat_ID[data_sql.all$insertion_order_name == "XEROX GCOMS X040 MAR/JAN-2016 ALL UK"]
Seat_select
Seat_select <- unique(data_sql.all$Seat_ID[data_sql.all$insertion_order_name == "XEROX GCOMS X040 MAR/JAN-2016 ALL UK"])
Seat_select
runApp("copilot_R")
runApp("copilot_R")
# shiny server
library(shiny)
#install.packages("DBI")
library(DBI)
#install.packages("RMySQL")
library(RMySQL)
#install.packages("dplyr")
library(dplyr)
install.packages("muStat")
library(muStat)
percent <- function(x, digits = 2, format = "f", ...) {
paste0(formatC(100 * x, format = format, digits = digits, ...), "%")
}
pretty.number <- function(x, big.mark=",", scientific=FALSE, ...) {
prettyNum(x, big.mark = big.mark,scientific = scientific)
}
format.money  <- function(x, ...) {
paste0("$", formatC(as.numeric(x), format="f", digits=2, big.mark=","))
}
# Connect MySQL
mydb <- dbConnect(MySQL(),
user='mark2015',
password='fghfgh67743185',
dbname='mysql_copilot_dash_1',
host='mysql-copilot-dash-instance1.cmzj9dljhdnd.us-east-1.rds.amazonaws.com')
# Create Data Set (table) - All
data_sql.all <- dbSendQuery(mydb, "select Seat_ID, insertion_order_name, line_item_name, line_item_id,
lineitem_Type, date(hour) as Date1,
sum(imps) as IMPs,
sum(clicks) as CLICKs, IFNULL(sum(clicks) / sum(imps),0) as CTR,
sum(total_convs) as TOT_CONVs,
sum(cost) as COST,
sum(revenue) as REV,
sum(profit) as PRFT,
IFNULL(sum(cost) / sum(imps),0) * 1000 as CPM,
IFNULL(sum(cost) / sum(clicks),0) as CPC,
IFNULL(sum(cost) / sum(total_convs),0) as CPA
from copilot_dash_log
group by Seat_ID, insertion_order_name, lineitem_Type, date(hour), line_item_name, line_item_id
order by Seat_ID, lineitem_Type, Date1"
)
data_sql.all <- fetch(data_sql.all, n=-1)
# Quick format on two IDs
data_sql.all$Seat_ID <- as.character(data_sql.all$Seat_ID)
data_sql.all$line_item_id <- as.character(data_sql.all$line_item_id)
install.packages("muStat")
# shiny server
library(shiny)
#install.packages("DBI")
library(DBI)
#install.packages("RMySQL")
library(RMySQL)
#install.packages("dplyr")
library(dplyr)
# install.packages("muStat")
library(muStat)
percent <- function(x, digits = 2, format = "f", ...) {
paste0(formatC(100 * x, format = format, digits = digits, ...), "%")
}
pretty.number <- function(x, big.mark=",", scientific=FALSE, ...) {
prettyNum(x, big.mark = big.mark,scientific = scientific)
}
format.money  <- function(x, ...) {
paste0("$", formatC(as.numeric(x), format="f", digits=2, big.mark=","))
}
# Connect MySQL
mydb <- dbConnect(MySQL(),
user='mark2015',
password='fghfgh67743185',
dbname='mysql_copilot_dash_1',
host='mysql-copilot-dash-instance1.cmzj9dljhdnd.us-east-1.rds.amazonaws.com')
# Create Data Set (table) - All
data_sql.all <- dbSendQuery(mydb, "select Seat_ID, insertion_order_name, line_item_name, line_item_id,
lineitem_Type, date(hour) as Date1,
sum(imps) as IMPs,
sum(clicks) as CLICKs, IFNULL(sum(clicks) / sum(imps),0) as CTR,
sum(total_convs) as TOT_CONVs,
sum(cost) as COST,
sum(revenue) as REV,
sum(profit) as PRFT,
IFNULL(sum(cost) / sum(imps),0) * 1000 as CPM,
IFNULL(sum(cost) / sum(clicks),0) as CPC,
IFNULL(sum(cost) / sum(total_convs),0) as CPA
from copilot_dash_log
group by Seat_ID, insertion_order_name, lineitem_Type, date(hour), line_item_name, line_item_id
order by Seat_ID, lineitem_Type, Date1"
)
data_sql.all <- fetch(data_sql.all, n=-1)
# Quick format on two IDs
data_sql.all$Seat_ID <- as.character(data_sql.all$Seat_ID)
data_sql.all$line_item_id <- as.character(data_sql.all$line_item_id)
# Connect MySQL
mydb <- dbConnect(MySQL(),
user='mark2015',
password='fghfgh67743185',
dbname='mysql_copilot_dash_1',
host='mysql-copilot-dash-instance1.cmzj9dljhdnd.us-east-1.rds.amazonaws.com')
# Create Data Set (table) - All
data_sql.all <- dbSendQuery(mydb, "select Seat_ID, insertion_order_name, line_item_name, line_item_id,
lineitem_Type, date(hour) as Date1,
sum(imps) as IMPs,
sum(clicks) as CLICKs, IFNULL(sum(clicks) / sum(imps),0) as CTR,
sum(total_convs) as TOT_CONVs,
sum(cost) as COST,
sum(revenue) as REV,
sum(profit) as PRFT,
IFNULL(sum(cost) / sum(imps),0) * 1000 as CPM,
IFNULL(sum(cost) / sum(clicks),0) as CPC,
IFNULL(sum(cost) / sum(total_convs),0) as CPA
from copilot_dash_log
group by Seat_ID, insertion_order_name, lineitem_Type, date(hour), line_item_name, line_item_id
order by Seat_ID, lineitem_Type, Date1"
)
data_sql.all <- fetch(data_sql.all, n=-1)
# shiny server
library(shiny)
#install.packages("DBI")
library(DBI)
#install.packages("RMySQL")
library(RMySQL)
#install.packages("dplyr")
library(dplyr)
# install.packages("muStat")
library(muStat)
# Connect MySQL
mydb <- dbConnect(MySQL(),
user='mark2015',
password='fghfgh67743185',
dbname='mysql_copilot_dash_1',
host='mysql-copilot-dash-instance1.cmzj9dljhdnd.us-east-1.rds.amazonaws.com')
# Create Data Set (table) - All
data_sql.all <- dbSendQuery(mydb, "select Seat_ID, insertion_order_name, line_item_name, line_item_id,
lineitem_Type, date(hour) as Date1,
sum(imps) as IMPs,
sum(clicks) as CLICKs, IFNULL(sum(clicks) / sum(imps),0) as CTR,
sum(total_convs) as TOT_CONVs,
sum(cost) as COST,
sum(revenue) as REV,
sum(profit) as PRFT,
IFNULL(sum(cost) / sum(imps),0) * 1000 as CPM,
IFNULL(sum(cost) / sum(clicks),0) as CPC,
IFNULL(sum(cost) / sum(total_convs),0) as CPA
from copilot_dash_log
group by Seat_ID, insertion_order_name, lineitem_Type, date(hour), line_item_name, line_item_id
order by Seat_ID, lineitem_Type, Date1"
)
data_sql.all <- fetch(data_sql.all, n=-1)
mydb <- dbConnect(MySQL(),
user='mark2015',
password='fghfgh67743185',
dbname='mysql_copilot_dash_1',
host='mysql-copilot-dash-instance1.cmzj9dljhdnd.us-east-1.rds.amazonaws.com')
